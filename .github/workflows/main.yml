# .github/workflows/pterodactyl-funcional-final.yml
name: Pterodactyl Funcional (Solución Definitiva)

on:
  # Permite iniciar el workflow manualmente
  workflow_dispatch:

jobs:
  iniciar-panel-pterodactyl:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Crear el archivo de configuración .env (CON APP_KEY)
        run: |
          # AÑADIMOS LA CLAVE DIRECTAMENTE PARA EVITAR ERRORES DE GENERACIÓN
          cat <<EOF > .env
          APP_ENV=production
          APP_DEBUG=false
          APP_KEY=base64:UNAEbQ83I2n3fO0z1TqJz3JtV7sAzfGq8gU6b8gL2Fw=
          APP_URL=http://localhost
          APP_TIMEZONE=UTC
          APP_SERVICE_AUTHOR=support@example.com
          DB_HOST=database
          DB_PORT=3306
          DB_DATABASE=panel
          DB_USERNAME=pterodactyl
          DB_PASSWORD=supersecretpassword
          CACHE_DRIVER=redis
          SESSION_DRIVER=redis
          QUEUE_DRIVER=redis
          REDIS_HOST=cache
          REDIS_PORT=6379
          MAIL_DRIVER=log
          EOF

      - name: 2. Crear el archivo docker-compose.yml
        run: |
          cat <<EOF > docker-compose.yml
          version: '3.8'
          services:
            database:
              image: mariadb:10.5
              restart: always
              command: --default-authentication-plugin=mysql_native_password
              volumes:
                - ./data/mysql:/var/lib/mysql
              environment:
                MYSQL_ROOT_PASSWORD: rootsecretpassword
                MYSQL_DATABASE: panel
                MYSQL_USER: pterodactyl
                MYSQL_PASSWORD: supersecretpassword
              networks:
                - pteronet
            cache:
              image: redis:6.2-alpine
              restart: always
              networks:
                - pteronet
            panel:
              image: ghcr.io/pterodactyl/panel:latest
              restart: always
              ports:
                - "80:80"
              links:
                - database
                - cache
              volumes:
                - ./.env:/var/www/html/.env
                - ./data/panel:/var/www/html/storage/
                - ./data/nginx:/etc/nginx/
              networks:
                - pteronet
          networks:
            pteronet:
              driver: bridge
          EOF

      - name: 3. Instalar Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: 4. Iniciar todos los servicios con Docker Compose
        run: |
          echo "Levantando los contenedores de Pterodactyl..."
          docker-compose up -d
          echo "Los servicios están arrancando. Esperando 60 segundos para que todo se estabilice..."
          sleep 60

      - name: 5. Ejecutar la configuración final del Panel
        run: |
          echo "Configurando la base de datos..."
          # Ahora funcionará porque la APP_KEY ya existe
          docker-compose exec -T panel php artisan migrate --seed --force
          
          echo "Creando el usuario administrador..."
          docker-compose exec -T panel php artisan p:user:make --admin=1 --username=admin --email=admin@example.com --password='P4ssw0rd.123' --no-interaction

      - name: 6. Descargar e instalar Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/

      - name: 7. Crear túnel público para acceder al panel
        run: |
          echo "--------------------------------------------------------"
          echo "¡Instalación completada! El panel está listo."
          echo "Creando el túnel público. La URL aparecerá a continuación."
          echo "Credenciales de acceso:"
          echo "Usuario: admin"
          echo "Contraseña: P4ssw0rd.123"
          echo "--------------------------------------------------------"
          cloudflared tunnel --url http://localhost:80
